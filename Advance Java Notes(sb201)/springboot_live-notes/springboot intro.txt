Spring boot :
==========

webapplication
-------------------
the application that we can access over the web through the web-browser s/w through the http protocol is known as web application.

Webapplication resided/deployed on the webserver/application server , it will be executed on the webserver only.

--a java based WA basically contains web-components or webresources like html file, image file, servlet program, jsp program etc.

each webresource program is capable of generating one webpage.

webpage : that we can open through a web browser s/w.

the webpages classified into 2 categories:

1.static webpage :- here content will be fixed with each user intraction ex: homepage of gmail

static webpages are precreated before client request.
those webresources which will generate the static webpages is known as static web resourses: ex:
html file, image file ,etc.

2.dynamic webpage: page contents will changed dynamically based on the input values ex: inbox of the gmail
 
--they are not precreated before client request, they will be created based on the input value dynamically.

the webresource which will generate dynamic webpages is known as dynamic webresources.ex:-servlet program or jsp program

servelt, it is class in which we write the logic to generate the dynamic html (webpage)

servlet: we write html code inside java

{
--

" <h1>The data is :  </h1>"


}

jsp :  it is an html file only in which we can write java code


Note: a WA is a combination of both static and dynamic web-resource program

html
js code
css 
image files
servlet program
jsp program
configuration file 

---> .war file -----  web-module   -----> web-container

similarities/differences bt webapplication and webservice:
==============================================

WS is also a type of WA, that can generate result as raw data (json,xml,text) instead of generating a html reponse (webpage)

--WA generates the view (webpage) whereas WS generates the raw data.

--this raw data generated by the WS can be reused inside any other WA or any other type of application developed in  any technology.


client -----------------> server




Http Protocol:
============
it is protocol that contains the set of rules and guidelines to get communication bt http client(browser s/w) and web-server.


incase of WA the http client will be browser s/w, where as in case of WS the client will be one of the following:

1. browser s/w
2.postman s/w 
3.swagger 
4.angular app
5.react app
6.normal js  using ajax
7.some other appl which is developed in another language also.
8.another type of java application / microservices


Http request structure:
-----------------------------

whenever http request is generated by the client to the server, that request contains lots of details based on following structure.

http request headers:
--------------------------

the headers r the key-value pair, where key is fixed and value will be changed based on the client request.

some of the standard headers of http request are:

1. Date : date and time on which request is made from the client
2.Host: ip address of the host
3.user-agent : from which browser the client request is generated.

4.content-type : type of data coming from request body (json, text, xml, pdf, jpg)

5.connection : live or lost

6.cockies: name or value pair.   ---->  create a coockie with the prefrence 

we can create our headers also

example: 
jwt ----> key 


Http response structure:
------------------------------

--webserver will generate the http reponse for a http request to the client.

status code: 
--------------

by default these status code will be set by the server only , or as a server side programmer we can also set our desired status code also.

100 - 199 : information

200 - 299 : success or OK

300 - 399 : redirection

400 - 499 : incomplete resource/ bad request

500 - 599 : server -error

these status code will be used by the client to know the status of their request.

http response headers:
----------------------------

these headers carry some additional information to the client to guide the client when using or displaying the response.

some of the response headers are:

server:
set-cookie: 
last-modified: 
refresh: 10 
date 
connection
content-type
etc..


Sending data to the server along with http request:
======================================

1.Request parameter:    (GET/ DELETE)
-------------------------

 /index.jsp?roll=123&name=ram   // query string

2.path parameter: it does not have the key  (GET/PUT/POST/DELETE)
--------------------

/index.jsp/10/ram

3. by using request body    (POST/PUT)
------------------------------

{
"roll": 123,
"name": "Ram",
"marks": 500
}



Spring boot:
---------------

it is a spring platform that mainly focus on convention over configuration.

--it is not a f/w s/w , it is just a spring application development platform which provides RAD (rapid application development) feature to the spring f/w

spring : application f/w ,

spring core: base module(DI ,IOC container),
spring boot: it is platform which simplyfy the spring application development

spring mvc : it is a spring module to develop java based web application// webservices









 






























































































